{"version":3,"sources":["components/NavBar.js","components/DeleteGoal.js","components/Goal.js","components/Task.js","components/Today.js","components/BigCalendar.js","components/AllGoals.js","components/NewTask.js","components/NewResource.js","components/MainBody.js","components/SignUp.js","components/SignIn.js","components/Resource.js","components/GoalShowPage.js","components/NewGoal.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","props","Navbar","bg","variant","Brand","alt","src","width","height","className","Nav","to","Link","Button","loggedinUser","username","DeleteGoal","Modal","show","onHide","Header","closeButton","Title","completedGoal","goal_name","Body","Footer","onClick","completeGoal","id","Goal","console","log","style","padding","Card","color","handleGoalClick","Img","as","backgroundColor","rgb","name","Text","ProgressBar","animated","now","tasks","length","tasksCount","completedTaskCount","forEach","task","is_complete","updateProgress","taskModalOpen","resourceModalOpen","float","dateComplete","d","date","Date","getMonth","getDate","getFullYear","getFormattedDate","Math","ceil","today","calcDaysFromToday","Task","ListGroup","Item","borderRadius","textDecoration","completeTaskids","includes","margin","completeTask","userSelect","textAlign","Today","useState","setTasks","goals","setGoals","updateTasks","fetch","then","response","json","user","goal","push","updateGoals","filter","useEffect","confirmedCompletedGoal","newTaskId","Container","fluid","minHeight","size","Row","Col","sm","borderTop","display","flexWrap","map","description","goal_description","key","renderGoals","complete","localizer","momentLocalizer","moment","BigCalendar","events","setEvents","userEvents","newEvent","start","toDate","end","add","title","defaultDate","defaultView","eventPropGetter","event","AllGoals","date_completed","renderCompletedGoals","NewTask","setName","Form","onSubmit","e","preventDefault","method","headers","body","JSON","stringify","goal_id","clickedGoalid","getNewTaskId","data","alert","Group","controlId","Label","Control","type","placeholder","value","onChange","target","NewResource","setDescription","url","setUrl","resource","getNewResourceId","rows","MainBody","deleteModalShow","deleteModalClose","taskModalShow","taskModalClose","resourceModalShow","resourceModalClose","exact","path","render","newResourceId","withRouter","setUsername","password","setPassword","confirmedPassword","setConfirmedPassword","history","SignIn","marginBottom","Image","rounded","handleSubmit","handleUsernameChange","handlePasswordChange","href","Resource","GoalShowPage","setGoal","Jumbotron","border","renderTasks","goal_resources","renderResources","setDate","user_id","floor","random","setLoggedinUser","loggedinUserId","setLoggedinUserId","setClickedGoalid","setCompleteTaskids","setDeleteModalShow","setTaskModalShow","setResourceModalShow","setCompletedGoal","setConfirmedCompletedGoal","setNewTaskId","setNewResourceId","loginUser","users","find","taskIds","checkUserTasks","taskId","undefined","every","v","deleteModalOpen","ids","routerProps","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6b04fd8a.chunk.js","sourcesContent":["import React from 'react'\nimport {Button, Nav, Navbar} from 'react-bootstrap'\nimport { LinkContainer } from \"react-router-bootstrap\";\n\n\nexport default function NavBar(props) {\n    \n    return (\n        <Navbar bg=\"dark\" variant=\"dark\">\n                <Navbar.Brand>\n                    <img\n                        alt=\"\"\n                        src=\"wilson.png\"\n                        width=\"30\"\n                        height=\"30\"\n                        className=\"d-inline-block align-top\"\n                    />{' '}\n                    Wilson\n                    </Navbar.Brand>\n            <Nav className=\"mr-auto\">\n                <LinkContainer to=\"/today\">\n                    <Nav.Link>Home</Nav.Link>\n                </LinkContainer>\n                <LinkContainer to=\"/calendar\">\n                    <Nav.Link>Calendar</Nav.Link>\n                </LinkContainer>\n                <LinkContainer to=\"/goals\">\n                    <Nav.Link>Completed</Nav.Link>\n                </LinkContainer>\n            </Nav>\n                <Button variant=\"outline-secondary\">{props.loggedinUser ? props.loggedinUser.username : 'Please Login'}</Button>\n        </Navbar>\n    )\n}\n","import React from 'react'\nimport {Modal, Button} from 'react-bootstrap'\n\n\nexport default function DeleteGoal(props) {\n\n    return (\n        <Modal show={props.show} onHide={props.onHide}>\n            <Modal.Header closeButton>\n            <Modal.Title>{`Congrats!! You Completed the ${props.completedGoal.goal_name}`}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>Would you like to mark this goal as complete?</Modal.Body>\n            <Modal.Footer>\n            <Button variant=\"secondary\" onClick={() => props.completeGoal(props.completedGoal.id)}>\n                Complete\n            </Button>\n            <Button variant=\"primary\" onClick={props.onHide}>\n                Add Task\n            </Button>\n            </Modal.Footer>\n        </Modal>\n    )\n}\n","import React, { useState, useEffect } from 'react'\nimport {Card, Button, ProgressBar} from 'react-bootstrap'\nimport { LinkContainer } from \"react-router-bootstrap\";\n\n\nexport default function Goal(props) {\n\n    const updateProgress = () => {\n        if (props.tasks.length !== 0) {\n            let tasksCount =  props.tasks.length\n            let completedTaskCount = 0\n            props.tasks.forEach(task => {\n                if (task.is_complete) {\n                    completedTaskCount ++\n                }\n            })\n            return (completedTaskCount / tasksCount) * 100\n        } else {\n            return 0\n        }\n    }\n\n    console.log(props)\n\n    let calcDaysFromToday = (date) => {\n        let today = new Date()\n        let dayToCalc = new Date(date)\n        return (dayToCalc - today) / 1000 / 60 / 60 / 24\n    }\n\n    function getFormattedDate(d) {\n        var date = new Date(d);\n        var month = date.getMonth() + 1;\n        var day = date.getDate();\n        var year = date.getFullYear();\n        return month + \"/\" + day + \"/\" + year;\n    }\n\n    return (\n        <div style={{ padding: '10px'}}>\n            <Card style={{color: 'black', width: '254px', height:'260px'}} onClick={() => props.handleGoalClick(props.id)}>\n                <Card.Img variant=\"top\" as='div' style={{ backgroundColor: props.rgb, width: '254px', height: '50px' }} />\n                <Card.Body>\n                    <Card.Title>{props.name}</Card.Title>\n                    <Card.Text>\n                        <ProgressBar animated now={updateProgress()} />\n                    </Card.Text>\n                        {props.taskModalOpen && props.resourceModalOpen ? <Button variant=\"primary\" onClick={props.taskModalOpen}>Add Task</Button> : null}\n                        {/* {props.resourceModalOpen ? <Button variant=\"primary\" onClick={props.resourceModalOpen}>Add Resource</Button> : null} */}\n                    <LinkContainer style={{float: 'right'}} to=\"goal_showpage\">\n                        <Button variant=\"danger\" >\n                            Show\n                        </Button>\n                    </LinkContainer>\n                    </Card.Body>\n                    <Card.Footer>\n                    {props.dateComplete ? <small>Completed on: {getFormattedDate(props.dateComplete)}</small> : <small className=\"text-muted\">Due in {Math.ceil(calcDaysFromToday(props.date) + 1)} days</small>}\n                </Card.Footer>\n            </Card>\n        </div>\n    )\n}\n","import React from 'react'\nimport {ListGroup} from 'react-bootstrap'\n\nexport default function Task(props) {\n    return (\n        <ListGroup.Item style={{borderRadius: '5px', color: \"black\", textDecoration: props.completeTaskids.includes(props.id) ? 'line-through' : '', backgroundColor: props.rgb, margin: '10px'}} onClick={() => props.completeTask(props.id)}>\n            <div style={{userSelect: \"none\", color: \"black\", backgroundColor: 'whitesmoke', padding: '4px', borderRadius: '5px', textAlign: 'center'}}>{props.name}</div>\n        </ListGroup.Item>\n    )\n}","import React, { useState, useEffect } from 'react'\nimport {Container, Row, Col, Button} from 'react-bootstrap'\nimport { LinkContainer } from \"react-router-bootstrap\";\nimport Goal from './Goal'\nimport Task from './Task'\n\nexport default function Today(props) {\n\n    const [tasks, setTasks] = useState([])\n    const [goals, setGoals] = useState([])\n\n    const updateTasks = () => {\n        fetch(`https://wilson-backend.herokuapp.com/api/v1/users/${props.loggedinUser.id}`)\n        .then(response => response.json())\n        .then(user => {\n            let tasks = []\n            user.goals.forEach(goal => {\n                if (!goal.is_complete) {\n                    let rgb = goal.rgb\n                    goal.tasks.forEach(task => {\n                        task.rgb = rgb\n                        tasks.push(task)\n                    })\n                }\n            })\n            setTasks(tasks)\n        })\n    }\n    const updateGoals = () => {\n        fetch(`https://wilson-backend.herokuapp.com/api/v1/users/${props.loggedinUser.id}`)\n        .then(response => response.json())\n        .then(user => setGoals(user.goals.filter(goal => !goal.is_complete)))        \n    }\n\n    // const updateResources = () => {\n    //     fetch(`http://localhost:3000/api/v1/users/${props.loggedinUser.id}`)\n    //     .then(response => response.json())\n    //     .then(user => {\n    //         let resources = []\n    //         user.goals.forEach(goal => {\n    //             if (goal.goal_resources.length > 0 && !goal.is_complete) {\n    //                 goal.goal_resources.forEach(resource => {\n    //                     resources.push(resource)\n    //                 })\n    //             }\n    //         });\n    //         setResources(resources)\n    //     })\n    // }\n\n    useEffect(() => {\n        updateTasks()\n        updateGoals()\n    }, [])\n\n    useEffect(() => {\n        updateGoals()\n    }, [props.completeTaskids])\n\n    useEffect(() => {\n        updateTasks()\n        updateGoals()\n    }, [props.confirmedCompletedGoal])\n    \n    useEffect(() => {\n        updateTasks()\n    }, [props.newTaskId])\n\n    // useEffect(() => {\n    //     updateResources()\n    // }, [props.newResourceId])\n\n\n    let renderGoals = () => {\n        if (goals.length > 0) {\n            return goals.map(goal => {\n                return <Goal completeTaskids={props.completeTaskids} tasks={goal.tasks} resourceModalOpen={props.resourceModalOpen} taskModalOpen={props.taskModalOpen}  rgb={goal.rgb} id={goal.id} handleGoalClick={props.handleGoalClick} description={goal.goal_description} date={goal.date} name={goal.goal_name} key={goal.id} />\n            })\n        }\n    }\n\n    const renderTasks = () => {\n        return tasks.map(task => {\n            return <Task complete={task.is_complete} rgb={task.rgb} id={task.id} completeTask={props.completeTask} completeTaskids={props.completeTaskids} name={task.name} description={task.description} key={task.id}/>\n        })\n    }\n\n    return (\n        <Container fluid style={{backgroundColor: '#333', color: 'white', padding: '3%', minHeight: \"80vh\", width: \"100%\"}}>\n            <LinkContainer to='/add_goal'>\n                <Button variant=\"secondary\" size=\"lg\" style={{width: '50%'}}>\n                    Add A Goal\n                </Button>\n            </LinkContainer>\n            <Row>\n                <Col sm={8} >\n                    <h2 style={{textAlign: \"center\"}} >Goals</h2>\n                    <hr style={{borderTop: \"3px solid white\"}}/>\n                    <div style={{display: \"flex\", flexWrap: \"wrap\"}}>\n                        {renderGoals()}\n                    </div>\n                    \n                </Col>\n                <Col sm={4}>\n                    <h2 style={{textAlign: \"center\"}} >Tasks</h2>\n                    <hr style={{borderTop: \"3px solid white\"}}/>\n                    {renderTasks()}\n                </Col>\n            </Row>\n        </Container>\n    )\n}","import React, { useState, useEffect } from 'react'\nimport {Container, Row, Col} from 'react-bootstrap'\nimport { Calendar, momentLocalizer } from \"react-big-calendar\"\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\nimport moment from \"moment\";\n\nconst localizer = momentLocalizer(moment);\n\nexport default function BigCalendar(props) {\n\n    const [events, setEvents] = useState([])\n\n    useEffect(() => {\n        fetch(`https://wilson-backend.herokuapp.com/api/v1/users/${props.loggedinUser.id}`)\n        .then(response => response.json())\n        .then(user => {\n                let userEvents = []\n                user.goals.forEach(goal => {\n                    if (!goal.is_complete) {\n                        let newEvent = {\n                            start: moment(goal.date).toDate(),\n                            end: moment(goal.date)\n                                .add(0, 'days')\n                                .toDate(),\n                            title: goal.goal_name,\n                            backgroundColor: goal.rgb\n                        }\n                        userEvents.push(newEvent)                        \n                    }\n                });\n            setEvents(userEvents)\n        })\n    }, [])\n\n    return (\n        <Container>\n            <Row >\n                <Col>\n                    <Calendar\n                        localizer={localizer}\n                        defaultDate={new Date()}\n                        defaultView=\"month\"\n                        events={events}\n                        style={{ height: \"100vh\", backgroundColor: 'white' }}\n                        eventPropGetter={event => ({\n                            style: {backgroundColor: event.backgroundColor}\n                        })}\n                    />                        \n                </Col>\n            </Row>\n        </Container>\n    )\n}","import React, { useState, useEffect } from 'react'\nimport {Container, Row, Col} from 'react-bootstrap'\n// import { LinkContainer } from \"react-router-bootstrap\";\nimport Goal from './Goal'\n\nexport default function AllGoals(props) {\n\n    const [goals, setGoals] = useState([])\n\n    useEffect(() => {\n        fetch(`https://wilson-backend.herokuapp.com/api/v1/users/${props.loggedinUser.id}`)\n        .then(response => response.json())\n        .then(user => setGoals(user.goals))\n    }, [])\n\n    const renderCompletedGoals = () => {\n        if (goals.length > 0) {\n            return goals.map(goal => {\n                if (goal.is_complete) {\n                    return <Goal tasks={goal.tasks} rgb={goal.rgb} description={goal.goal_description} dateComplete={goal.date_completed} complete={goal.is_complete} id={goal.id} handleGoalClick={props.handleGoalClick} name={goal.goal_name} key={goal.id} />\n                }\n            })\n        }\n    }\n    \n    return (\n        <Container fluid style={{backgroundColor: '#333', color: 'white', padding: '1%', minHeight: \"80vh\", width: \"100%\"}}>\n            \n            <Row>\n                <Col>\n                    <h2>Completed</h2>\n                </Col>\n            </Row>\n            <Row>\n                <Col style={{display: \"flex\", flexWrap: \"wrap\"}}>\n                    {renderCompletedGoals()}\n                </Col>\n            </Row>\n        </Container>\n    )        \n    \n}","import React, { useState } from 'react'\nimport {Modal, Button, Form} from 'react-bootstrap'\n\nexport default function NewTask(props) {\n    \n    const [name, setName] = useState('')\n\n    const handleChange = e => setName(e.target.value)\n\n    const onSubmit = e => {\n        e.preventDefault()\n        if (name !== '') {\n            fetch(\"https://wilson-backend.herokuapp.com/api/v1/tasks\", {\n                method: \"POST\",\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    goal_id: props.clickedGoalid,\n                    name: name,\n                })\n            })\n            .then(response => response.json())\n            .then(task => {\n                props.getNewTaskId(task.data.id)\n            })\n            setName('')\n        } else {\n            alert('Feilds are empty')\n        }\n    }\n\n    return (\n        <Modal show={props.show} onHide={props.onHide}>\n            <Modal.Header closeButton>\n            <Modal.Title>New Task</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Form onSubmit={onSubmit}>\n                    <Form.Group controlId=\"formBasicEmail\">\n                        <Form.Label>Task:</Form.Label>\n                        <Form.Control type=\"text\" placeholder=\"Enter Task\" name={'task'} value={name} onChange={handleChange} />\n                    </Form.Group>\n                    <Button variant=\"primary\" type=\"submit\" onClick={props.onHide}>\n                        Submit\n                    </Button>\n                </Form>\n            </Modal.Body>               \n        </Modal>\n    )\n}","import React, { useState } from 'react'\nimport {Modal, Button, Form} from 'react-bootstrap'\n\nexport default function NewResource(props) {\n\n    const [name, setName] = useState('')\n    const [description, setDescription] = useState('')\n    const [url, setUrl] = useState('')\n\n    const handleNameChange = e => setName(e.target.value)\n    const handleDescriptionChange = e => setDescription(e.target.value)\n    const handleUrlChange = e => setUrl(e.target.value)\n\n    const onSubmit = e => {\n        e.preventDefault()\n        if (name !== '' && description !== '') {\n            fetch(\"https://wilson-backend.herokuapp.com/api/v1/goal_resources\", {\n                method: \"POST\",\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    goal_id: props.clickedGoalid,\n                    name: name,\n                    description: description,\n                    url: url\n                })\n            })\n            .then(response => response.json())\n            .then(resource => {\n                props.getNewResourceId(resource.data.id)\n            })\n            setName('')\n            setDescription('')\n            setUrl('')\n        } else {\n            alert('Feilds are empty')\n        }\n    }\n    return (\n        <Modal show={props.show} onHide={props.onHide}>\n            <Modal.Header closeButton>\n            <Modal.Title>New Resource</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Form onSubmit={onSubmit}>\n                    <Form.Group >\n                        <Form.Label>Resource Name:</Form.Label>\n                        <Form.Control type=\"text\" placeholder=\"Required\" name={'name'} value={name} onChange={handleNameChange} />\n                    </Form.Group>\n                    <Form.Group >\n                        <Form.Label>Description:</Form.Label>\n                        <Form.Control as=\"textarea\" rows=\"3\" placeholder=\"Optional\" name={'description'} value={description} onChange={handleDescriptionChange} />\n                    </Form.Group>\n                    <Form.Group >\n                        <Form.Label>URL:</Form.Label>\n                        <Form.Control type=\"text\" placeholder=\"Required\" name={'url'} value={url} onChange={handleUrlChange} />\n                    </Form.Group>\n                    <Button variant=\"primary\" type=\"submit\" onClick={props.onHide}>\n                        Submit\n                    </Button>\n                </Form>\n            </Modal.Body>\n        </Modal>\n    )\n}","import React from 'react'\nimport { Route } from 'react-router'\nimport DeleteGoal from './DeleteGoal';\nimport Today from './Today'\nimport BigCalendar from './BigCalendar'\nimport AllGoals from './AllGoals'\nimport NewTask from './NewTask'\nimport NewResource from './NewResource'\n\nexport default function MainBody(props) {\n\n\n    return (\n        <div className=\"main-body\">\n            <DeleteGoal completeGoal={props.completeGoal} completedGoal={props.completedGoal} show={props.deleteModalShow} onHide={props.deleteModalClose}  />\n            <NewTask  getNewTaskId={props.getNewTaskId} show={props.taskModalShow} onHide={props.taskModalClose} clickedGoalid={props.clickedGoalid} />\n            <NewResource getNewResourceId={props.getNewResourceId} show={props.resourceModalShow} onHide={props.resourceModalClose}  clickedGoalid={props.clickedGoalid} />\n            <Route exact path=\"/today\" render={() => <Today newResourceId={props.newResourceId} newTaskId={props.newTaskId} taskModalShow={props.taskModalShow} confirmedCompletedGoal={props.confirmedCompletedGoal} resourceModalOpen={props.resourceModalOpen} taskModalOpen={props.taskModalOpen} loggedinUser={props.loggedinUser} completeTask={props.completeTask} completeTaskids={props.completeTaskids} handleGoalClick={props.handleGoalClick}/>} />\n            <Route exact path=\"/calendar\" render={() => <BigCalendar loggedinUser={props.loggedinUser} />} />\n            <Route exact path=\"/goals\" render={() => <AllGoals resourceModalOpen={props.resourceModalOpen} taskModalOpen={props.taskModalOpen} loggedinUser={props.loggedinUser} handleGoalClick={props.handleGoalClick}/>} />\n        </div>\n    )        \n}\n","import React, { useState } from 'react'\nimport {Container, Row, Col, Form, Button} from 'react-bootstrap'\nimport { withRouter } from 'react-router-dom';\n\n\nfunction SignUp(props) {\n\n    const [username, setUsername] = useState('')\n    const [password, setPassword] = useState('')\n    const [confirmedPassword, setConfirmedPassword] = useState('')\n\n    const handleUsernameChange = e => setUsername(e.target.value)\n    const handlePasswordChange = e => setPassword(e.target.value)\n    const handleConfirmedPasswordChange = e => setConfirmedPassword(e.target.value)\n\n    const onSubmit = e => {\n        e.preventDefault()\n        if (password === confirmedPassword && password !== '') {\n            fetch(\"https://wilson-backend.herokuapp.com/api/v1/users\", {\n                method: \"POST\",\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    username: username,\n                    password: password,\n                })\n            })\n            props.history.push('/wilson')\n        } else {\n            alert('Passwords are empty or do not match!')\n        }\n    }\n\n    return (\n        <Container style={{backgroundColor: '#333', color: 'white', padding: '3%'}}>\n            <Row>\n                <Col>\n                    <Form onSubmit={onSubmit}>\n                    \n                        <Form.Group >\n                            <Form.Label>Create Username:</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"Enter username\" value={username} onChange={handleUsernameChange} />\n                        </Form.Group>\n\n                        <Form.Group >\n                            <Form.Label>Password:</Form.Label>\n                            <Form.Control type=\"password\" placeholder=\"Password\" value={password} onChange={handlePasswordChange} />\n                        </Form.Group>\n\n                        <Form.Group >\n                            <Form.Label>Re-enter password:</Form.Label>\n                            <Form.Control type=\"password\" placeholder=\"Re-enter password\" value={confirmedPassword} onChange={handleConfirmedPasswordChange} />\n                        </Form.Group>\n\n                        <Button variant=\"primary\" type=\"submit\">\n                            Submit\n                        </Button>\n\n                    </Form>\n                </Col>\n            </Row>\n        </Container>\n    )\n}\n\nexport default withRouter(SignUp);","import React from 'react'\nimport {Form, Button, Container, Row, Col, Image} from 'react-bootstrap'\nimport { Link } from 'react-router-dom'\n\n\n\nexport default function SignIn(props) {\n    \n    return (\n        <Container style={{backgroundColor: '#333', color: 'white', padding: '3%'}}>\n            <Row style={{marginBottom: \"3%\"}}>\n                <Col sm={4} style={{textAlign: \"center\"}}>   \n                <Image style={{height: \"200px\", width: \"200px\"}} src=\"wilson.png\" rounded />\n                </Col>\n\n                <Col sm={8} style={{margin: 'auto 0'}}>\n                    <h1>Welcome to <span style={{color: 'rgb(214, 17, 18)'}}>Wilson</span></h1>\n                    <h3>Get Off Your Island!</h3>\n                    <p>A simple app to keep track of your goals, tasks, and resources... all in one place.</p>\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    <Form onSubmit={props.handleSubmit} >\n                        <Form.Group controlId=\"username\">\n                        <Form.Label>Username:</Form.Label>\n                        <Form.Control type=\"username\" placeholder=\"Enter username\" name={'username'} value={props.username} onChange={props.handleUsernameChange} />\n                        </Form.Group>\n                        <Form.Group controlId=\"formBasicPassword\">\n                        <Form.Label>Password</Form.Label>\n                        <Form.Control type=\"password\" placeholder=\"Password\" name={'password'} value={props.password} onChange={props.handlePasswordChange} />\n                        </Form.Group>\n                        <Form.Text className=\"text-muted\">\n                            Not registered? <Link to='/signup' href=\"#\">Create an account</Link>\n                        </Form.Text>\n                        <Button variant=\"secondary\" type=\"submit\">Submit</Button>\n                    </Form>\n                </Col>\n            </Row>\n        </Container>\n    )\n    \n}\n\n\n{/* <Jumbotron style={{backgroundColor: '#333', color: 'white', display: 'inline-block', width: '100%'}}>\n<img\n    alt=\"\"\n    src=\"wilson.png\"\n    width=\"200\"\n    height=\"200\"\n    className=\"d-inline-block align-top\"\n    style={{verticalAlign: 'middle', textAlign: 'center', float: 'left', marginRight: '70px'}}\n/>\n\n<p>\n</p>\n</Jumbotron>\n</Col>\n</Row>\n<Row>\n<Col md={{ span: 6, offset: 3}} style={{backgroundColor: '#333', color: 'white', padding: '15px', borderRadius: '5px', }}>\n<Form onSubmit={props.handleSubmit} >\n<Form.Group controlId=\"username\">\n<Form.Label>Username:</Form.Label>\n<Form.Control type=\"username\" placeholder=\"Enter username\" name={'username'} value={props.username} onChange={props.handleUsernameChange} />\n</Form.Group>\n<Form.Group controlId=\"formBasicPassword\">\n<Form.Label>Password</Form.Label>\n<Form.Control type=\"password\" placeholder=\"Password\" name={'password'} value={props.password} onChange={props.handlePasswordChange} />\n</Form.Group>\n<Form.Text className=\"text-muted\">\nNot registered? <Link to='/signup' href=\"#\">Create an account</Link>\n</Form.Text>\n<Button variant=\"secondary\" type=\"submit\">Submit</Button>\n</Form> */}\n","import React from 'react'\nimport { Card } from 'react-bootstrap'\n\nexport default function Resource(props) {\n    return (\n        <Card>\n            <Card.Body>\n            <Card.Text>\n                <h3>{props.name}</h3>\n                <p>{props.description}</p>\n                <a>{props.url}</a>\n            </Card.Text>\n            </Card.Body>\n            <Card.Img variant=\"bottom\" src={props.url}/>\n        </Card>\n    )\n}\n","import React, { useState, useEffect } from 'react'\nimport {Container, Row, Col, Jumbotron, Button} from 'react-bootstrap'\nimport Resource from './Resource'\nimport Task from './Task'\n\nexport default function GoalShowPage(props) {\n\n    const [goal, setGoal] = useState('')\n\n    const renderTasks = () => {\n        if (goal !== '') {\n            let rgb = goal.rgb\n            return goal.tasks.map(task => {\n                return <Task rgb={rgb} id={task.id} completeTask={props.completeTask} completeTaskids={props.completeTaskids} name={task.name} description={task.description} key={task.id}/>\n            })\n        }\n    }\n    const renderResources = () => {\n        if (goal !== '') {\n            return goal.goal_resources.map(resource => {\n                return <Resource url={resource.url} key={resource.id} name={resource.name} description={resource.description}/>\n            })\n        }\n    }\n    useEffect(() => {\n        fetch(`https://wilson-backend.herokuapp.com/api/v1/goals/${props.clickedGoalid}`)\n        .then(response => response.json())\n        .then(goal => setGoal(goal))\n    }, [props.newTaskId])\n\n    useEffect(() => {\n        fetch(`https://wilson-backend.herokuapp.com/api/v1/goals/${props.clickedGoalid}`)\n        .then(response => response.json())\n        .then(goal => {setGoal(goal)})\n    }, [])\n\n    return (\n        <Container fluid style={{backgroundColor: '#333', padding: '50px'}}>\n            <Row>\n                <Col>\n                    <Jumbotron style={{ border: `solid ${goal.rgb} 4px`}}>\n                        <h1>{goal.goal_name}</h1>\n                        <p>{goal.goal_description}</p>\n                        <p>\n                            <Button variant=\"secondary\" onClick={props.taskModalOpen}>Add Task</Button>\n                            <Button variant=\"secondary\" onClick={props.resourceModalOpen}>Add Resource</Button>\n                        </p>\n                    </Jumbotron>\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    {renderTasks()}\n                </Col>\n                <Col>\n                    {renderResources()}\n                </Col>\n            </Row>\n        </Container>\n    )    \n}","import React, { useState } from 'react'\nimport { withRouter } from 'react-router-dom';\nimport {Form, Button, Container, Row, Col} from 'react-bootstrap'\n\nfunction NewGoal(props) {\n\n    const [name, setName] = useState('')\n    const [description, setDescription] = useState('')\n    const [date, setDate] = useState('')\n\n    const handleNameChange = e => setName(e.target.value)\n    const handleDescriptionChange = e => setDescription(e.target.value)\n    const handleDateChange = e => setDate(e.target.value) \n    \n    const onSubmit = e => {\n        e.preventDefault()\n        if (name !== '' && description !== '' && date !== '') {\n            fetch(\"https://wilson-backend.herokuapp.com/api/v1/goals\", {\n                method: \"POST\",\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    user_id: props.loggedinUser.id,\n                    goal_name: name,\n                    goal_description: description,\n                    date: date,\n                    rgb: `rgb(${Math.floor(Math.random() * 255)}, ${Math.floor(Math.random() * 255)}, ${Math.floor(Math.random() * 255)})`\n                })\n            })\n            props.history.push('/today')\n        } else {\n            alert('Feilds are empty')\n        }\n    }\n\n\n    return (\n        <Container style={{backgroundColor: '#333', color: 'white', padding: '10px', borderRadius: '5px'}}>\n            <Row>\n                <Col>\n                    <Form onSubmit={onSubmit}>\n                        <Form.Group>\n                        <Form.Label>Name</Form.Label>\n                        <Form.Control type=\"text\" placeholder=\"Enter Goal Name\" name=\"name\" value={name} onChange={handleNameChange} />\n                        </Form.Group>\n\n                        <Form.Group>\n                            <Form.Label>Goal Description</Form.Label>\n                            <Form.Control as=\"textarea\" rows=\"3\" name=\"description\" value={description} onChange={handleDescriptionChange}/>\n                        </Form.Group>\n\n                        <Form.Group>\n                            <Form.Label>Goal Date</Form.Label>\n                            <br></br>\n                            <input type=\"date\" name=\"date\" value={date} onChange={handleDateChange}/>\n                        </Form.Group>\n\n                        <Button variant=\"secondary\" type=\"submit\">\n                            Submit\n                        </Button>\n                    </Form>\n                </Col>\n            </Row>\n        </Container>\n    )\n}\nexport default withRouter(NewGoal);","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { Route, withRouter } from 'react-router-dom';\nimport NavBar from './components/NavBar'\nimport MainBody from './components/MainBody'\nimport SignUp from './components/SignUp'\nimport SignIn from './components/SignIn'\nimport GoalShowPage from './components/GoalShowPage'\nimport NewGoal from './components/NewGoal'\n\nfunction App(props) {\n\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [loggedinUser, setLoggedinUser] = useState({})\n  const [loggedinUserId, setLoggedinUserId] = useState('')\n  const [clickedGoalid, setClickedGoalid] = useState('')\n  const [completeTaskids, setCompleteTaskids] = useState([])\n  const [deleteModalShow, setDeleteModalShow] = useState(false)\n  const [taskModalShow, setTaskModalShow] = useState(false)\n  const [resourceModalShow, setResourceModalShow] = useState(false)\n  const [completedGoal, setCompletedGoal] = useState({})\n  const [confirmedCompletedGoal, setConfirmedCompletedGoal] = useState({})\n  const [newTaskId, setNewTaskId] = useState('')\n  const [newResourceId, setNewResourceId] = useState('')\n\n  const handleSubmit = e => {\n    e.preventDefault()\n    loginUser() \n  }\n\n  const handleUsernameChange = e => setUsername(e.target.value)\n  const handlePasswordChange = e => setPassword(e.target.value)\n\n  const loginUser = () => {\n    fetch(\"https://wilson-backend.herokuapp.com/api/v1/users\")\n    .then(response => response.json())\n    .then(users => {\n      let user = users.find(user => user.username === username)\n      if (user && user.password ===  password) {\n          setLoggedinUser(user)\n          setLoggedinUserId(user.id)\n          props.history.push('/today')\n      } else {\n          alert('Wrong Username or Password')\n      }\n    })\n  }\n\n  useEffect(() => {\n      if (loggedinUser.id) {\n        fetch(`https://wilson-backend.herokuapp.com/api/v1/users/${loggedinUser.id}`)\n        .then(response => response.json())\n        .then(user => {\n          let taskIds = []\n          user.goals.forEach(goal => {\n            if (!goal.is_complete) {\n              goal.tasks.forEach(task => {\n                if (task.is_complete) {\n                  taskIds.push(task.id)\n                }\n              })\n            }\n          })\n          setCompleteTaskids(taskIds)\n        })        \n      }\n  }, [loggedinUserId])\n\n  useEffect(() => {\n    if (completeTaskids.length > 0) {\n      fetch(`https://wilson-backend.herokuapp.com/api/v1/users/${loggedinUser.id}`)\n      .then(response => response.json())\n      .then(user => {\n        setLoggedinUser(user)\n        checkUserTasks()\n      })\n    }\n  }, [completeTaskids])\n\n  const handleGoalClick = id => setClickedGoalid(id)\n\n  const completeTask = id => {\n    if (completeTaskids.includes(id)) {\n      fetch(`https://wilson-backend.herokuapp.com/api/v1/tasks/${id}`, {\n        method: \"PATCH\",\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          is_complete: false\n        })\n      })\n      setCompleteTaskids(completeTaskids.filter(taskId => taskId !== id))\n    } else {\n      setCompleteTaskids([...completeTaskids, id])\n      fetch(`https://wilson-backend.herokuapp.com/api/v1/tasks/${id}`, {\n        method: \"PATCH\",\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          is_complete: true\n        })\n      })\n    }\n  }\n\n  const checkUserTasks = () => {\n    if (loggedinUser.goals !== undefined && completeTaskids.length !== 0) {\n        loggedinUser.goals.forEach(goal => {\n          let target = []\n          goal.tasks.forEach(task => {\n            target.push(task.id)\n          })\n          if (target.length !== 0 ) {\n            if (target.every(v => completeTaskids.includes(v))) {\n              deleteModalOpen()\n              setCompletedGoal(goal)\n            }\n          }\n        });\n    }\n  }\n\n  const deleteModalOpen = () => setDeleteModalShow(true)\n  const deleteModalClose = () => setDeleteModalShow(false)\n\n  const taskModalOpen = () => setTaskModalShow(true)\n  const taskModalClose = () => setTaskModalShow(false)\n\n  const resourceModalOpen = () => setResourceModalShow(true)\n  const resourceModalClose = () => setResourceModalShow(false)\n\n  const completeGoal = (id) => {\n    let goal = loggedinUser.goals.find(goal => goal.id === id)\n    setCompleteTaskids([...completeTaskids].filter(ids => goal.tasks.forEach(task => task.id)))\n    setConfirmedCompletedGoal(goal.tasks)\n    fetch(`https://wilson-backend.herokuapp.com/api/v1/goals/${id}`, {\n      method: \"PUT\",\n      headers: {\n          'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n          is_complete: true,\n          date_completed: new Date()\n      })\n    })\n    deleteModalClose()\n  }\n\n  const getNewTaskId = (id) => setNewTaskId(id)\n  const getNewResourceId = (id) => setNewResourceId(id)\n  return (\n    <div>\n      <NavBar loggedinUser={loggedinUser}/> \n      <MainBody newTaskId={newTaskId} getNewResourceId={getNewResourceId} newResourceId={newResourceId} getNewTaskId={getNewTaskId} confirmedCompletedGoal={confirmedCompletedGoal} resourceModalClose={resourceModalClose} resourceModalOpen={resourceModalOpen} resourceModalShow={resourceModalShow} taskModalShow={taskModalShow} taskModalClose={taskModalClose} taskModalOpen={taskModalOpen} clickedGoalid={clickedGoalid} completeGoal={completeGoal} completedGoal={completedGoal} deleteModalClose={deleteModalClose} deleteModalShow={deleteModalShow} loggedinUser={loggedinUser} handleGoalClick={handleGoalClick} completeTaskids={completeTaskids} completeTask={completeTask}/>\n      <Route exact path=\"/signup\" render={() => <SignUp />} />\n      <Route exact path=\"/wilson\" render={(routerProps) => <SignIn handleSubmit={handleSubmit} username={username} password={password} handleUsernameChange={handleUsernameChange} handlePasswordChange={handlePasswordChange} loggedinUser={loggedinUser} username={username} password={password} {...routerProps}/>} />\n      <Route exact path=\"/goal_showpage\" render={() => <GoalShowPage newTaskId={newTaskId} newResourceId={newResourceId}  resourceModalOpen={resourceModalOpen} taskModalOpen={taskModalOpen} clickedGoalid={clickedGoalid} completeTaskids={completeTaskids} completeTask={completeTask} />} />\n      <Route exact path=\"/add_goal\" render={() => <NewGoal loggedinUser={loggedinUser}/>} />\n    </div>\n  );\n} \nexport default withRouter(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Router><App /></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}